// Generated by IcedCoffeeScript 1.6.2c
(function() {
  var BubbleChart, CompareData, L, addState, charts, explanations, first_time, formatNumber, getExplanation, globalSelectedItem, globalTooltipItem, globalTooltipShown, gotExplanations, gotStories, handleNewState, iced, init, removeState, showTooltip, state, stories, __iced_k, __iced_k_noop, _ref, _ref1,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = {
    Deferrals: (function() {
      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) {
          return this.continuation(this.ret);
        }
      };

      _Class.prototype.defer = function(defer_params) {
        var _this = this;
        ++this.count;
        return function() {
          var inner_params, _ref;
          inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (defer_params != null) {
            if ((_ref = defer_params.assign_fn) != null) {
              _ref.apply(null, inner_params);
            }
          }
          return _this._fulfill();
        };
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    },
    trampoline: function(_fn) {
      return _fn();
    }
  };
  __iced_k = __iced_k_noop = function() {};

  L = function() {
    var x;
    x = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return console.log.apply(console, x);
  };

  formatNumber = function(n, decimals) {
    var negativePrefix, negativeSuffix, num, prefix, remainder, s, suffix;
    suffix = "";
    negativePrefix = "";
    negativeSuffix = "";
    if (n < 0) {
      negativePrefix = " הכנסה של";
      negativeSuffix = "";
      n = -n;
    }
    if (n >= 1000000000000) {
      suffix = " trillion";
      n = n / 1000000000000;
      decimals = 2;
    } else if (n >= 1000000000) {
      suffix = " מיליארד";
      n = n / 1000000000;
      decimals = 1;
    } else if (n >= 1000000) {
      suffix = " מיליון";
      n = n / 1000000;
      decimals = 1;
    }
    prefix = "";
    if (decimals > 0) {
      if (n < 1) {
        prefix = "0";
      }
      s = String(Math.round(n * (Math.pow(10, decimals))));
      if (s < 10) {
        remainder = "0" + s.substr(s.length - decimals, decimals);
        num = "";
      } else {
        remainder = s.substr(s.length - decimals, decimals);
        num = s.substr(0, s.length - decimals);
      }
      return negativePrefix + prefix + num.replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,") + "." + remainder + suffix + negativeSuffix;
    } else {
      s = String(Math.round(n));
      s = s.replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,");
      return negativePrefix + s + suffix + negativeSuffix;
    }
  };

  CompareData = (function(_super) {
    __extends(CompareData, _super);

    function CompareData() {
      _ref = CompareData.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    CompareData.prototype.defaults = {
      data: [],
      field: "",
      title: "?",
      link: null
    };

    CompareData.prototype.initialize = function() {
      return this.on('change:field', function() {
        var data, field;
        field = this.get('field');
        data = budget_array_data[field];
        if (data) {
          console.log('setting field ' + field + " title: " + data.t);
          this.set('code', data.c);
          this.set('link', data.l);
          this.set('title', data.t);
          return this.set('data', data.d);
        } else {
          return console.log('field ' + field + ' is ' + data);
        }
      });
    };

    return CompareData;

  })(Backbone.Model);

  globalSelectedItem = null;

  globalTooltipItem = null;

  globalTooltipShown = false;

  showTooltip = function(d, xpos, ypos, that) {
    var bcodes, itemNumber, pctchngout, svgPos, tail;
    if (!globalTooltipItem) {
      d3.select("#tooltip").style('display', 'none');
      globalTooltipShown = false;
      return;
    }
    svgPos = $("svg:last").offset();
    tail = 100;
    xpos += that.centerX;
    if (xpos < 125) {
      tail += 125 - xpos;
      xpos = 125;
    }
    if (xpos > (that.width - 125)) {
      tail -= xpos - (that.width - 125);
      xpos = that.width - 125;
    }
    xpos += 4;
    if (ypos > 0) {
      ypos = ypos - d.radius - 10 + svgPos.top + that.centerY;
      $("#tooltipContainer").css("bottom", 0);
      d3.select("#tooltip .arrow.top").style("display", "none");
      d3.select("#tooltip .arrow.bottom").style("display", "block");
    } else {
      ypos = ypos + d.radius + 10 + svgPos.top + that.centerY;
      $("#tooltipContainer").css("bottom", "");
      d3.select("#tooltip .arrow.top").style("display", "block");
      d3.select("#tooltip .arrow.bottom").style("display", "none");
    }
    d3.select("#tooltip").style('top', ypos + "px").style('left', xpos + "px");
    if (globalTooltipShown) {
      return;
    }
    d3.select("#tooltip").style('display', 'block').classed('plus', d.changeCategory > 0).classed('minus', d.changeCategory < 0).classed('newitem', d.newitem).classed('disappeared', d.disappeared);
    d3.select("#tooltip .name").html(d.name);
    itemNumber = d.code;
    if (d.bcodes.length > 0) {
      bcodes = _.map(d.bcodes, (function(x) {
        return x[0];
      }));
      console.log(bcodes.length, bcodes[0], d.code, bcodes[0] === d.code);
      if ((bcodes.length !== 1) || (bcodes[0] !== d.code)) {
        itemNumber += " (" + (bcodes.join(",")) + " ב-2012)";
      }
    }
    d3.select("#tooltip .itemNumber").text(itemNumber);
    d3.select("#tooltip .explanation").text(getExplanation(d.sid, 2014));
    if (d.history) {
      if (d.history > 0) {
        d3.select("#tooltip .history").text("בארבע השנים האחרונות הביצוע היה גבוה ב-" + d.history + "% מהתכנון");
      } else if (d.history < 0) {
        d3.select("#tooltip .history").text("בארבע השנים האחרונות הביצוע היה נמוך ב-" + (-d.history) + "% מהתכנון");
      }
    } else {
      d3.select("#tooltip .history").text("");
    }
    d3.select("#tooltip .value").html(formatNumber(d.value * 1000) + " \u20aa");
    d3.selectAll("#tooltip .arrow").style("right", tail + "px");
    if (d != null ? d.changestr : void 0) {
      pctchngout = d.changestr;
    } else {
      pctchngout = d.change === "N.A." ? "N.A" : that.pctFormat(Math.abs(d.change));
    }
    pctchngout = pctchngout + (d.change < 0 ? "-" : "+");
    d3.select("#tooltip .change").html(pctchngout);
    return globalTooltipShown = true;
  };

  BubbleChart = (function(_super) {
    __extends(BubbleChart, _super);

    function BubbleChart() {
      _ref1 = BubbleChart.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    BubbleChart.prototype.fillColor = function(changeCategory) {
      var _fillColor;
      _fillColor = d3.scale.ordinal().domain([-4, -3, -2, -1, 0, 1, 2, 3, 4]).range(["#9F7E01", "#dbae00", "#eac865", "#f5dd9c", "#AAA", "#bfc3dc", "#9ea5c8", "#7b82c2", "#464FA1"]);
      return _fillColor(changeCategory);
    };

    BubbleChart.prototype.strokeColor = function(code, changeCategory) {
      var _strokeColor;
      if (code === globalSelectedItem) {
        return "#FF0";
      }
      _strokeColor = d3.scale.ordinal().domain([-4, -3, -2, -1, 0, 1, 2, 3, 4]).range(["#796001", "#c09100", "#e7bd53", "#d9c292", "#999", "#a7aed3", "#7f8ab8", "#4f5fb0", "#1A2055"]);
      return _strokeColor(changeCategory);
    };

    BubbleChart.prototype.getFillColor = function(d) {
      return this.fillColor(d.changeCategory);
    };

    BubbleChart.prototype.getStrokeColor = function(d) {
      return this.strokeColor(d.sid, d.changeCategory);
    };

    BubbleChart.prototype.getProjFillColor = function(d) {
      return this.fillColor(d.projectedChangeCategory);
    };

    BubbleChart.prototype.getProjStrokeColor = function(d) {
      return this.strokeColor(null, d.projectedChangeCategory);
    };

    BubbleChart.prototype.strokeWidth = function(d) {
      if (d.code === globalSelectedItem) {
        return 5;
      } else {
        return 1;
      }
    };

    BubbleChart.prototype.pctFormat = function(p) {
      var pFormat;
      pFormat = d3.format(".1%");
      if (p === Infinity || p === -Infinity) {
        return "N.A";
      } else {
        return pFormat(p);
      }
    };

    BubbleChart.prototype.defaultCharge = function(d) {
      if (d.value < 0) {
        return 0;
      } else {
        return -Math.pow(d.radius, 2.0) / 8;
      }
    };

    BubbleChart.prototype.totalSort = function(alpha) {
      var _this = this;
      return function(d) {
        var targetX, targetY;
        targetY = 0;
        targetX = 0;
        if (d.isNegative) {
          if (d.changeCategory > 0) {
            d.x = -200;
          } else {
            d.x = 1100;
          }
        }
        d.y = d.y + (targetY - d.y) * (_this.defaultGravity + 0.02) * alpha;
        return d.x = d.x + (targetX - d.x) * (_this.defaultGravity + 0.02) * alpha;
      };
    };

    BubbleChart.prototype.buoyancy = function(alpha) {
      var _this = this;
      return function(d) {
        var targetY;
        targetY = -(d.changeCategory / 3) * _this.boundingRadius;
        return d.y = d.y + (targetY - d.y) * _this.defaultGravity * alpha * alpha * alpha * 500;
      };
    };

    BubbleChart.prototype.categorizeChange = function(c) {
      if (isNaN(c)) {
        return 0;
      }
      if (c < -0.5) {
        return -4;
      }
      if (c < -0.25) {
        return -3;
      }
      if (c < -0.05) {
        return -2;
      }
      if (c < -0.001) {
        return -1;
      }
      if (c <= 0.001) {
        return 0;
      }
      if (c <= 0.05) {
        return 1;
      }
      if (c <= 0.25) {
        return 2;
      }
      if (c <= 0.5) {
        return 3;
      }
      return 4;
    };

    BubbleChart.prototype.setOverlayed = function(overlayed) {
      overlayed = overlayed ? true : false;
      if (overlayed) {
        return this.transitiontime = 0;
      } else {
        return this.transitiontime = 1000;
      }
    };

    BubbleChart.prototype.initialize = function(options) {
      var _this = this;
      this.options = options;
      _.bindAll(this);
      this.width = 970;
      this.height = 550;
      this.id = this.options.id;
      this.overlayShown = false;
      console.log("BubbleChart:initialize", this.id);
      this.defaultGravity = 0.1;
      this.force = this.svg = this.circle = null;
      this.centerX = this.width / 2;
      this.centerY = this.height / 2;
      this.model.bind('change:data', function() {
        return _this.updateData(_this.model.get('data'));
      });
      d3.select(this.el).html("");
      this.svg = d3.select(this.el).append("svg:svg");
      this.svg.on("click", function() {
        removeState();
        return false;
      });
      return console.log("init done", this.id);
    };

    BubbleChart.prototype.collectTitles = function(titles, field, prefix, _state) {
      var code, data, n, name, _i, _len, _ref2, _results;
      if (prefix == null) {
        prefix = '';
      }
      if (_state == null) {
        _state = [];
      }
      if (!field) {
        return;
      }
      data = budget_array_data[field];
      if (data) {
        _ref2 = data.d;
        _results = [];
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          n = _ref2[_i];
          code = n.id;
          name = n.n;
          if (name && code) {
            titles.push({
              id: code,
              text: prefix + name,
              code: code,
              state: _state,
              fullpath: data.c + ";" + code
            });
          }
          _results.push(this.collectTitles(titles, n.d, prefix + name + ' | ', _state.concat([n.d])));
        }
        return _results;
      }
    };

    BubbleChart.prototype.updateData = function(data) {
      var container, currentYearDataColumn, n, node, oldNodes, out, previousYearDataColumn, rScale, radiusScale, sid, sum, x, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref2;
      oldNodes = [];
      sum = 0;
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        x = data[_i];
        sum += x.b1;
      }
      this.totalValue = sum != null ? sum : 400000000;
      console.log("Totalvalue: " + this.totalValue);
      if (typeof this !== "undefined" && this !== null ? this.nodes : void 0) {
        _ref2 = this.nodes;
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          node = _ref2[_j];
          oldNodes.push(node);
        }
      }
      this.nodes = [];
      this.titles = [];
      this.collectTitles(this.titles, this.model.get('field'));
      rScale = d3.scale.pow().exponent(0.5).domain([0, this.totalValue]).range([7, 165]);
      radiusScale = function(n) {
        return rScale(Math.abs(n));
      };
      this.boundingRadius = radiusScale(this.totalValue);
      currentYearDataColumn = 'b1';
      previousYearDataColumn = 'b0';
      for (_k = 0, _len2 = data.length; _k < _len2; _k++) {
        n = data[_k];
        out = null;
        sid = n.id;
        for (_l = 0, _len3 = oldNodes.length; _l < _len3; _l++) {
          node = oldNodes[_l];
          if (node.sid === sid) {
            out = node;
          }
        }
        if (out === null) {
          out = {
            x: -150 + Math.random() * 300,
            y: -150 + Math.random() * 300
          };
        }
        out.sid = n.id;
        out.code = n.jc;
        out.radius = radiusScale(n[currentYearDataColumn]);
        out.change = n.c / 100.0;
        out.changeCategory = this.categorizeChange(n.c / 100.0);
        out.value = n[currentYearDataColumn];
        out.name = n.n;
        out.isNegative = n[currentYearDataColumn] < 0;
        out.positions = n.positions;
        out.drilldown = n.d;
        out.history = n.pp;
        out.bcodes = n.bc;
        console.log("" + out.sid + ": " + out.history);
        if (out.history) {
          out.projectedValue = out.value * (out.history + 100) / 100.0;
          out.projectedRadius = radiusScale(out.projectedValue);
          out.projectedChangeCategory = this.categorizeChange(((n.c + 100) * (n.pp + 100) - 10000) / 10000.0);
          console.log("" + out.sid + ": " + out.projectedChangeCategory);
        }
        /*
        #  if (n.positions.total) 
                	    	#     out.x = n.positions.total.x + (n.positions.total.x - (@width / 2)) * 0.5
                	    	#     out.y = n.positions.total.y + (n.positions.total.y - (150)) * 0.5
        */

        if ((n[currentYearDataColumn] > 0) && (n[previousYearDataColumn] < 0)) {
          out.changestr = "הפך מהכנסה להוצאה";
          out.changeCategory = 4;
        }
        if ((n[currentYearDataColumn] < 0) && (n[previousYearDataColumn] > 0)) {
          out.changestr = "הפך מהוצאה להכנסה";
          out.changeCategory = -4;
        }
        out.newitem = false;
        out.disappeared = false;
        if (n.c === 99999) {
          out.changestr = "תוקצב מחדש";
          out.changeCategory = 4;
          out.newitem = true;
        }
        if (out.value === 0) {
          out.disappeared = true;
          out.value = n[previousYearDataColumn];
          out.radius = radiusScale(n[previousYearDataColumn]);
        }
        this.nodes.push(out);
      }
      this.nodes.sort(function(a, b) {
        return Math.abs(b.value) - Math.abs(a.value);
      });
      this.titles.sort(function(a, b) {
        if (a.code > b.code) {
          return 1;
        } else {
          return -1;
        }
      });
      if (data.length > 0) {
        return this.render();
      } else {
        container = $("div[data-id='" + this.id + "']");
        if (this.transitiontime > 0) {
          this.circle.transition().duration(this.transitiontime).attr("r", function(d) {
            return 0;
          });
          return container.find(".overlay").css("opacity", 0.9).animate({
            opacity: 0
          }, this.transitiontime, function() {
            return container.remove();
          });
        } else {
          return container.remove();
        }
      }
    };

    BubbleChart.prototype.showOverlay = function(id) {
      var node, origin, scale, target, _i, _len, _node, _ref2;
      if (this.overlayShown) {
        return;
      }
      this.overlayShown = true;
      node = null;
      _ref2 = this.nodes;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        _node = _ref2[_i];
        if (_node.drilldown === id) {
          node = _node;
        }
      }
      if (node === null) {
        return;
      }
      scale = this.height / node.radius / 3;
      console.log("showOverlay: ", node.radius, this.height, scale);
      origin = "translate(" + this.centerX + "," + this.centerY + ")rotate(0)translate(1,1)scale(1)";
      target = "translate(" + this.centerX + "," + this.centerY + ")rotate(120)translate(" + (-node.x * scale) + "," + (-node.y * scale) + ")scale(" + scale + ")";
      if (this.transitiontime === 0) {
        this.svg.selectAll("circle").attr("transform", target);
      } else {
        this.svg.selectAll("circle").transition().duration(this.transitiontime).attrTween("transform", function() {
          return d3.interpolateString(origin, target);
        });
        console.log("TRANSITION " + origin + " -> " + target);
      }
      return $("#tooltip").hide();
    };

    BubbleChart.prototype.overlayRemoved = function() {
      var origin, target;
      this.setOverlayed(false);
      this.overlayShown = false;
      origin = this.svg.select("circle").attr("transform");
      target = "translate(" + this.centerX + "," + this.centerY + ")rotate(0)translate(1,1)scale(1)";
      this.svg.selectAll("circle").transition().duration(this.transitiontime).attrTween("transform", function() {
        return d3.interpolateString(origin, target);
      });
      return this.circle.attr("r", function(d) {
        return d.radius;
      });
    };

    BubbleChart.prototype.selectItem = function(d) {
      globalSelectedItem = d.code;
      this.circle.style("stroke-width", this.strokeWidth);
      return this.circle.style("stroke", this.getStrokeColor);
    };

    BubbleChart.prototype.render = function() {
      var container, frame, overlay, resizeFrame, search, share_popover, tagClicked, tags, that,
        _this = this;
      that = this;
      $("div[data-id='" + this.id + "'] .btnDownload").attr("href", "/images/large/" + (this.model.get('field')) + ".jpg");
      share_popover = $("div[data-id='" + this.id + "'] .btnShare");
      share_popover.popover({
        html: true,
        placement: "top",
        content: "<input type='text' class='fb-select'/>"
      });
      share_popover.on("show", function() {
        var fb_select, field, titles, ___iced_passed_deferral, __iced_deferrals, __iced_k,
          _this = this;
        __iced_k = __iced_k_noop;
        ___iced_passed_deferral = iced.findDeferral(arguments);
        field = that.model.get('field');
        titles = _.map(that.nodes, function(d) {
          return {
            id: d.sid,
            text: d.name,
            path: field + ";" + d.sid
          };
        });
        titles.unshift({
          id: field,
          text: "שיתוף התרשים כמות שהוא",
          path: field
        });
        console.log("CLICK!", titles);
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "vis.coffee"
          });
          setTimeout((__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return __iced_deferrals.ret = arguments[0];
              };
            })(),
            lineno: 403
          })), 100);
          __iced_deferrals._fulfill();
        })(function() {
          fb_select = $(".fb-select:last");
          return fb_select.select2({
            placeholder: "בחירת סעיף לשיתוף",
            allowClear: true,
            data: titles
          }).on("change", function(e) {
            var path, sharer;
            if (e.added) {
              path = e.added.path;
              console.log("got share btn!", path);
              fb_select.select2("close");
              share_popover.popover("hide");
              sharer = "https://www.facebook.com/sharer/sharer.php?u=http://compare.open-budget.org.il/of/" + path + ".html";
              return window.open(sharer, 'sharer', 'width=626,height=436');
            }
          });
        });
      });
      this.setBreadcrumbs = function(dd) {
        var actual_querys, bc, depth, link, mshLinkCode, query, title, _i, _j, _len, _len1, _ref2;
        if (dd == null) {
          dd = null;
        }
        bc = $("div[data-id='" + _this.id + "'] .breadcrumbs");
        bc.find(".breadpart").remove();
        actual_querys = [];
        _ref2 = state.querys;
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          query = _ref2[_i];
          actual_querys.push(query);
          if (query === _this.model.get('field')) {
            break;
          }
        }
        depth = actual_querys.length;
        for (_j = 0, _len1 = actual_querys.length; _j < _len1; _j++) {
          query = actual_querys[_j];
          depth -= 1;
          title = budget_array_data[query].t;
          if (depth > 0) {
            bc.append("<span class='breadpart breadcrumbsParent' data-up='" + depth + "'>" + title + "</span>");
            bc.append("<span class='breadpart breadcrumbsSeparator'></span>");
          } else {
            bc.append("<span class='breadpart breadcrumbsCurrent'>" + title + "</span>");
          }
        }
        bc.find(".breadcrumbsParent").click(function() {
          var up_count;
          up_count = parseInt($(this).attr('data-up'));
          console.log("breadcrumbsParent click!", up_count);
          removeState(up_count);
          return false;
        });
        mshLinkCode = null;
        if (!dd) {
          mshLinkCode = _this.model.get('code');
        } else {
          bc.append("<span class='breadpart breadcrumbsSeparator'></span>");
          bc.append("<span class='breadpart breadcrumbsChild'>" + dd.name + "</span>");
          mshLinkCode = dd.sid;
        }
        if (mshLinkCode) {
          bc.append('<span class="breadpart breadcrumbsMsh"><a class="breadcrumbsLink" target="_new" href="http://budget.msh.gov.il/#' + mshLinkCode + ',2014,0,1,1,1,0,0,0,0,0,0" class="active" target="top" data-toggle="tooltip" title="מידע היסטורי אודות הסעיף הנוכחי">' + '<i class="icon-bar-chart icon"></i></a></span><!--i class="icon-book icon-flip-horizontal icon"></i-->');
        }
        link = _this.model.get('link');
        if (link) {
          bc.append('<span class="breadpart breadcrumbsGov"><a class="breadcrumbsLink" target="_new" href="' + link + '" ' + 'class="active" target="top" data-toggle="tooltip" title="עיון בספר התקציב במשרד האוצר">' + '<i class="icon-book icon-flip-horizontal icon"></i></a></span>');
        }
        return $("div[data-id='" + _this.id + "'] .breadcrumbsLink").tooltip();
      };
      this.setBreadcrumbs();
      $("div[data-id='" + this.id + "'] .btnBack").tooltip();
      $("div[data-id='" + this.id + "'] .btnDownload").tooltip();
      $("div[data-id='" + this.id + "'] .btnShare").tooltip();
      $("div[data-id='" + this.id + "'] .color-index").tooltip();
      search = $("div[data-id='" + this.id + "'] .mysearch");
      $("div[data-id='" + this.id + "'] .mysearch-open").click(function() {
        search.select2("open");
        return false;
      });
      search.select2({
        placeholder: "חפשו סעיף ספציפי",
        allowClear: true,
        data: this.titles
      });
      search.on("select2-open", function(e) {
        return $("div[data-id='" + that.id + "'] .breadcrumbs").css("visibility", "hidden");
      }).on("select2-close", function(e) {
        return $("div[data-id='" + that.id + "'] .breadcrumbs").css("visibility", "visible");
      }).on("select2-highlight", function(e) {
        return that.selectItem(e.choice.id);
      }).on("change", function(e) {
        var x, _i, _len, _ref2;
        console.log("changed:", e);
        if (e.added) {
          that.selectItem(e.added.id);
          _ref2 = e.added.state;
          for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
            x = _ref2[_i];
            addState(x);
          }
          return search.select2("val", "");
        } else {
          return that.selectItem(null);
        }
      });
      if (false) {
        tags = $("div[data-id='" + this.id + "'] .tag");
        tagClicked = false;
        tags.mouseenter(function() {
          that.selectItem($(this).text());
          return tagClicked = false;
        }).mouseleave(function() {
          if (!tagClicked) {
            return that.selectItem(null);
          }
        }).click((function() {
          that.selectItem($(this).text());
          tagClicked = true;
          return false;
        }));
      }
      container = $("div[data-id='" + this.id + "'] .overlayContainer");
      overlay = $("div[data-id='" + this.id + "'] .overlay");
      frame = $("div[data-id='" + this.id + "'] .frame");
      resizeFrame = function() {
        console.log("frame resize");
        _this.width = $(window).width() - 8;
        if (_this.width > 900) {
          _this.width = 900;
        }
        _this.centerX = _this.width / 2 + 4;
        _this.svg.attr("width", _this.width);
        _this.svg.style("width", _this.width + "px");
        if (!_this.overlayShown && _this.circle) {
          _this.circle.attr("transform", "translate(" + _this.centerX + "," + _this.centerY + ")rotate(0)translate(0,0)scale(1)");
        }
        return overlay.css("height", (frame.height() + 8) + "px");
      };
      $(window).resize(resizeFrame);
      resizeFrame();
      if (this.transitiontime > 0) {
        overlay.css("opacity", 0).animate({
          opacity: 0.9
        }, this.transitiontime);
      } else {
        overlay.css("opacity", 0.9);
      }
      this.circle = this.svg.selectAll("circle.regular").data(this.nodes, function(d) {
        return d.sid;
      });
      that = this;
      this.circle.enter().append("svg:circle").attr("transform", "translate(" + this.centerX + "," + this.centerY + ")rotate(0)translate(0,0)scale(1)").attr("data-title", function(d) {
        return d.name;
      }).style("stroke-width", this.strokeWidth).style("fill", this.getFillColor).style("stroke", this.getStrokeColor).style("cursor", function(d) {
        if (budget_array_data[d.drilldown]) {
          return "pointer";
        } else {
          return "default";
        }
      }).classed('regular', true).classed('newitem', function(d) {
        return d.newitem;
      }).classed('disappeared', function(d) {
        return d.disappeared;
      }).on("click", function(d, i) {
        if (budget_array_data[d.drilldown]) {
          addState(d.drilldown);
        }
        d3.event.stopPropagation();
        return false;
      }).on("mouseover", function(d, i) {
        var anim, el;
        el = d3.select(this);
        if (false && !d.newitem && !d.disappeared) {
          anim = that.svg.insert("svg:circle", ":first-child").attr("cx", el.attr("cx")).attr("cy", el.attr("cy")).attr("transform", el.attr("transform")).attr("r", el.attr("r")).style("stroke", el.style("stroke")).style("fill", el.style("fill")).classed("tooltiphelper-" + d.sid, true);
          anim.transition().duration(500).attr("r", d.projectedRadius).style("fill", that.getProjFillColor(d));
          el.style("stroke-dasharray", "5,5").style("fill", "rgba(255,255,255,0)");
        }
        if (d.drilldown) {
          el.style("stroke", "#000").style("stroke-width", 3);
        }
        globalTooltipItem = d.sid;
        return showTooltip(d, Number(el.attr('cx')), Number(el.attr('cy')), that);
      }).on("mouseout", function(d, i) {
        globalTooltipItem = null;
        d3.selectAll("circle.tooltiphelper-" + d.sid).remove();
        d3.select(this).attr("r", d.radius).style("stroke-width", that.strokeWidth).style("stroke", that.getStrokeColor(d)).style("stroke-dasharray", null).style("fill", that.getFillColor(d));
        return showTooltip();
      });
      if (this.transitiontime > 0) {
        this.circle.transition().duration(this.transitiontime).attr("r", function(d) {
          return d.radius;
        }).style("fill", function(d) {
          return _this.getFillColor(d);
        }).style("stroke", function(d) {
          return _this.getStrokeColor(d);
        });
        this.circle.exit().transition().duration(this.transitiontime).attr("r", function(d) {
          return 0;
        }).remove();
      } else {
        this.circle.attr("r", function(d) {
          return d.radius;
        }).style("fill", function(d) {
          return _this.getFillColor(d);
        }).style("stroke", function(d) {
          return _this.getStrokeColor(d);
        });
        this.circle.exit().remove();
      }
      if (this.force !== null) {
        this.force.stop();
      }
      return this.force = d3.layout.force().nodes(this.nodes).size([this.width, this.height]).gravity(-0.01).charge(this.defaultCharge).friction(0.9).on("tick", function(e) {
        var avgx, maxx, minx, num;
        maxx = 0;
        minx = 0;
        avgx = 0;
        num = _this.nodes.length;
        return _this.circle.each(_this.totalSort(e.alpha)).each(_this.buoyancy(e.alpha)).each(function(d) {
          var max, min;
          max = d.x + d.radius;
          maxx = max > maxx ? max : maxx;
          min = d.x - d.radius;
          minx = min < minx ? min : minx;
          return avgx = (maxx + minx) / 2;
        }).attr("cx", function(d) {
          return d.x - avgx;
        }).attr("cy", function(d) {
          return d.y;
        }).each(function(d) {
          if (d.sid === globalTooltipItem) {
            return showTooltip(d, d.x - avgx, d.y, that);
          }
        });
      }).start();
    };

    return BubbleChart;

  })(Backbone.View);

  state = {
    querys: [],
    selectedStory: null
  };

  charts = [];

  first_time = true;

  addState = function(toAdd) {
    if (!(state != null ? state.querys : void 0)) {
      state.querys = [];
    }
    console.log("addState: toAdd=" + toAdd + ", state=", state);
    state.querys.push(toAdd);
    return History.pushState(state, null, "?" + state.querys.join("/"));
  };

  removeState = function(amount) {
    var i, _i;
    if (amount == null) {
      amount = 1;
    }
    console.log("removeState:", amount, state.querys);
    globalTooltipItem = null;
    showTooltip();
    if (state.querys.length > amount) {
      for (i = _i = 0; 0 <= amount ? _i < amount : _i > amount; i = 0 <= amount ? ++_i : --_i) {
        state.querys.pop();
      }
      console.log("removeState new querys:", state.querys);
      return History.pushState(state, null, "?" + state.querys.join("/"));
    }
  };

  handleNewState = function() {
    var default_subtitle, el, explanation, i, id, max, nextquery, overlaid, query, subtitle, template, title, _i, _j, _ref2, _ref3, _ref4;
    state = History.getState();
    state = state.data;
    console.log("state changed: ", state);
    query = "00";
    if (!state.querys || state.querys.length === 0) {
      state.querys = ["00"];
    }
    if (!state.selectedStory) {
      state.selectedStory = {
        'title': "כך נראה תקציב המדינה בשנתיים הקרובות",
        'subtitle': null
      };
    }
    for (i = _i = 0, _ref2 = state.querys.length; 0 <= _ref2 ? _i < _ref2 : _i > _ref2; i = 0 <= _ref2 ? ++_i : --_i) {
      query = state.querys[i];
      nextquery = state.querys[i + 1];
      id = "id" + i;
      el = $("div[data-id='" + id + "'] .chart");
      if (el.size() === 0) {
        console.log("creating chart " + id);
        title = ((_ref3 = state.selectedStory) != null ? _ref3.title : void 0) || "השווה את התקציב";
        default_subtitle = 'כך הממשלה מתכוונת להוציא מעל 400 מיליארד שקלים. העבירו את העכבר מעל לעיגולים וגלו כמה כסף מקדישה הממשלה לכל מטרה. לחצו על עיגול בשביל לצלול לעומק התקציב ולחשוף את הפינות החבויות שלו';
        explanation = getExplanation(query);
        console.log("ADAM1", explanation);
        if (explanation !== null) {
          default_subtitle = explanation;
          console.log("ADAM2", default_subtitle, state.selectedStory.subtitle);
        }
        subtitle = state.selectedStory.subtitle || default_subtitle;
        template = _.template($("#chart-template").html(), {
          id: id,
          title: title,
          subtitle: subtitle,
          code: query
        });
        $("#charts").append(template);
        el = $("div[data-id='" + id + "'] .chart");
        console.log("creating BubbleChart " + id);
        charts[i] = new BubbleChart({
          el: el,
          model: new CompareData,
          id: id
        });
      }
    }
    max = state.querys.length > charts.length ? state.querys.length : charts.length;
    console.log("max: " + max);
    for (i = _j = _ref4 = max - 1; _ref4 <= 0 ? _j <= 0 : _j >= 0; i = _ref4 <= 0 ? ++_j : --_j) {
      console.log("setting field for " + i);
      if (i >= state.querys.length) {
        console.log("removing chart #" + i);
        charts[i].updateData([]);
        charts.pop();
        continue;
      }
      query = state.querys[i];
      overlaid = false;
      if ((i < state.querys.length - 2) || (first_time && (i < state.querys.length - 1))) {
        overlaid = true;
      }
      charts[i].setOverlayed(overlaid);
      charts[i].model.set("field", query);
      if (i < state.querys.length - 1) {
        charts[i].showOverlay(state.querys[i + 1]);
      }
    }
    if (max > state.querys.length) {
      if (charts.length > 0) {
        console.log("chart " + (charts.length - 1) + ": overlay removed");
        charts[charts.length - 1].overlayRemoved();
      }
    }
    first_time = false;
    $(".btnBack:first").css("display", "none");
    return window.ga('send', 'pageview', state.querys.join("/"));
  };

  explanations = {};

  getExplanation = function(code, year) {
    var explanation, years;
    years = explanations[code];
    console.log("got years ", years, "for", code);
    if (years) {
      year = parseInt(year);
      explanation = years[year];
      if (!explanation) {
        explanation = years[Object.keys(years)[0]];
      }
      return explanation;
    }
    return null;
  };

  gotStories = false;

  gotExplanations = false;

  window.handleExplanations = function(data) {
    var code, curCodeExpl, entry, explanation, row, title, year, years, _i, _j, _len, _len1, _ref2, _year;
    row = 1;
    code = null;
    explanation = null;
    years = null;
    _ref2 = data.feed.entry;
    for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
      entry = _ref2[_i];
      title = entry.title.$t;
      if (title.search(/B[0-9]+/) === 0) {
        code = "00" + entry.content.$t;
      }
      if (title.search(/D[0-9]+/) === 0) {
        explanation = entry.content.$t;
      }
      if (title.search(/F[0-9]+/) === 0) {
        years = entry.content.$t;
        years = years.split(",");
        if (code !== null && explanation !== null) {
          for (_j = 0, _len1 = years.length; _j < _len1; _j++) {
            _year = years[_j];
            year = parseInt(_year);
            curCodeExpl = explanations[code];
            if (!curCodeExpl) {
              explanations[code] = {};
            }
            explanations[code][year] = explanation;
            console.log("EXP", code, year);
          }
        }
        code = explanation = null;
      }
    }
    console.log(explanations);
    gotExplanations = true;
    if (gotStories && gotExplanations) {
      return init();
    }
  };

  stories = {};

  window.handleStories = function(data) {
    var chartid, code, entry, range, row, subtitle, title, _i, _len, _ref2;
    row = 1;
    code = null;
    title = null;
    subtitle = null;
    chartid = null;
    _ref2 = data.feed.entry;
    for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
      entry = _ref2[_i];
      range = entry.title.$t;
      if (range.search(/B[0-9]+/) === 0) {
        code = entry.content.$t;
      }
      if (range.search(/C[0-9]+/) === 0) {
        title = entry.content.$t;
      }
      if (range.search(/D[0-9]+/) === 0) {
        subtitle = entry.content.$t;
      }
      if (range.search(/G[0-9]+/) === 0) {
        chartid = entry.content.$t;
        stories[chartid] = {
          code: code,
          title: title,
          subtitle: subtitle
        };
        code = title = subtitle = chartid = null;
      }
    }
    console.log(stories);
    gotStories = true;
    if (gotStories && gotExplanations) {
      return init();
    }
  };

  init = function() {
    var firstquery, parse, query, ret_query, up, _ref2, _state;
    History.Adapter.bind(window, 'statechange', handleNewState);
    query = "00";
    ret_query = window.location.search.slice(1);
    if (ret_query.length === 0) {
      ret_query = window.location.hash;
      console.log("using hash: " + ret_query);
      if (ret_query.length > 0) {
        ret_query = query.split("?");
        if (ret_query.length > 1) {
          query = ret_query[1];
          console.log("got state (hash): " + query);
        }
      }
    } else {
      query = ret_query;
      console.log("got state (search): " + query);
    }
    if (stories[query]) {
      state.selectedStory = stories[query];
      query = state.selectedStory.code;
      console.log("Selected story (" + state.selectedStory.code + ")! " + state.selectedStory.title + ", " + state.selectedStory.subtitle);
    } else {
      state.selectedStory = null;
    }
    parse = query.split(";");
    if (parse.length > 1) {
      query = parse[0];
      globalTooltipItem = globalSelectedItem = parse[1];
    }
    state.querys = query.split("/");
    console.log("Q", state.querys);
    if (state.querys.length === 1) {
      while (budget_array_data[state.querys[0]]) {
        up = budget_array_data[state.querys[0]].u;
        if (up) {
          state.querys.unshift(up);
        } else {
          break;
        }
      }
    }
    console.log("Q2", state.querys);
    firstquery = state.querys[0];
    if (!state.selectedStory) {
      state.selectedStory = {
        'title': "תקציב המדינה 2014 מול 2012",
        'subtitle': null
      };
    }
    _state = History.getState();
    console.log("getState: ", _state);
    if (((_ref2 = _state.data) != null ? _ref2.querys : void 0) && _state.data.querys.length > 0) {
      handleNewState();
    } else {
      console.log("xxx", _state.data);
      History.pushState(state, null, "?" + state.querys.join("/"));
      console.log("pushed ", state);
    }
    $(document).keyup(function(e) {
      if (e.keyCode === 27) {
        removeState();
      }
      return false;
    });
    return $(".btnBack:last").live("click", function() {
      removeState();
      return false;
    });
  };

  $(function() {
    if ((document.createElementNS != null) && (document.createElementNS('http://www.w3.org/2000/svg', "svg").createSVGRect != null)) {
      $.get("http://spreadsheets.google.com/feeds/cells/0AurnydTPSIgUdEd1V0tINEVIRHQ3dGNSeUpfaHY3Q3c/od6/public/basic?alt=json-in-script", window.handleStories, "jsonp");
      return $.get("http://spreadsheets.google.com/feeds/cells/0AqR1sqwm6uPwdDJ3MGlfU0tDYzR5a1h0MXBObWhmdnc/2/public/basic?alt=json-in-script", window.handleExplanations, "jsonp");
    }
  });

}).call(this);
